name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description:
          'SemVer to tag (must match package.json on main, e.g. 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark the GitHub Release as a prerelease?'
        required: false
        default: 'false'
        type: choice
        options: ['false', 'true']

permissions:
  contents: write

jobs:
  tag_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Ensure latest main
        run: |
          git fetch origin main --prune --tags
          git checkout main
          git reset --hard origin/main

      - name: Sanity checks
        shell: bash
        run: |
          VERSION="${{ inputs.version }}"
          # Tag must not exist
          git fetch --tags --force
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "::error ::Tag v$VERSION already exists"; exit 1
          fi
          # package.json must exist and match the input version
          test -f package.json || { echo "::error ::package.json not found"; exit 1; }
          PKG_VERSION=$(node -p "require('./package.json').version")
          if [ "$PKG_VERSION" != "$VERSION" ]; then
            echo "::error ::package.json version ($PKG_VERSION) != input ($VERSION)"; exit 1
          fi

      - name: Configure git identity as triggering actor (for tagger)
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create and push tag
        shell: bash
        env:
          VERSION: ${{ inputs.version }}
        run: |
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Create GitHub Release (auto notes)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ inputs.version }}" \
            --target main \
            --generate-notes \
            $([ "${{ inputs.prerelease }}" = "true" ] && echo --prerelease || true)
